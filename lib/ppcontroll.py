import math
import matplotlib.pyplot as plt
import numpy as np
from move import DCMotor,ServoMotor
from get_image_scp_class import ColorDetector
import threading

import time 


L = 5  # look ahead distance
dt = 0.1  # discrete time

# Vehicle parameters (m)
LENGTH = 21.0
WIDTH = 15.0
BACKTOWHEEL = 5.5
WHEEL_LEN = 0.3
WHEEL_WIDTH = 0.2
TREAD = 0.7
WB = 12.0


def plotVehicle(x, y, yaw, steer=0.0, cabcolor="-r", truckcolor="-k"):
    """
    The function is to plot the vehicle
    it is copied from https://github.com/AtsushiSakai/PythonRobotics/blob/187b6aa35f3cbdeca587c0abdb177adddefc5c2a/PathTracking/model_predictive_speed_and_steer_control/model_predictive_speed_and_steer_control.py#L109
    """
    outline = np.array(
        [
            [
                -BACKTOWHEEL,
                (LENGTH - BACKTOWHEEL),
                (LENGTH - BACKTOWHEEL),
                -BACKTOWHEEL,
                -BACKTOWHEEL,
            ],
            [WIDTH / 2, WIDTH / 2, -WIDTH / 2, -WIDTH / 2, WIDTH / 2],
        ]
    )

    fr_wheel = np.array(
        [
            [WHEEL_LEN, -WHEEL_LEN, -WHEEL_LEN, WHEEL_LEN, WHEEL_LEN],
            [
                -WHEEL_WIDTH - TREAD,
                -WHEEL_WIDTH - TREAD,
                WHEEL_WIDTH - TREAD,
                WHEEL_WIDTH - TREAD,
                -WHEEL_WIDTH - TREAD,
            ],
        ]
    )

    rr_wheel = np.copy(fr_wheel)

    fl_wheel = np.copy(fr_wheel)
    fl_wheel[1, :] *= -1
    rl_wheel = np.copy(rr_wheel)
    rl_wheel[1, :] *= -1

    Rot1 = np.array([[math.cos(yaw), math.sin(yaw)], [-math.sin(yaw), math.cos(yaw)]])
    Rot2 = np.array(
        [[math.cos(steer), math.sin(steer)], [-math.sin(steer), math.cos(steer)]]
    )

    fr_wheel = (fr_wheel.T.dot(Rot2)).T
    fl_wheel = (fl_wheel.T.dot(Rot2)).T
    fr_wheel[0, :] += WB
    fl_wheel[0, :] += WB

    fr_wheel = (fr_wheel.T.dot(Rot1)).T
    fl_wheel = (fl_wheel.T.dot(Rot1)).T

    outline = (outline.T.dot(Rot1)).T
    rr_wheel = (rr_wheel.T.dot(Rot1)).T
    rl_wheel = (rl_wheel.T.dot(Rot1)).T

    outline[0, :] += x
    outline[1, :] += y
    fr_wheel[0, :] += x
    fr_wheel[1, :] += y
    rr_wheel[0, :] += x
    rr_wheel[1, :] += y
    fl_wheel[0, :] += x
    fl_wheel[1, :] += y
    rl_wheel[0, :] += x
    rl_wheel[1, :] += y

    plt.plot(
        np.array(outline[0, :]).flatten(), np.array(outline[1, :]).flatten(), truckcolor
    )
    plt.plot(
        np.array(fr_wheel[0, :]).flatten(),
        np.array(fr_wheel[1, :]).flatten(),
        truckcolor,
    )
    plt.plot(
        np.array(rr_wheel[0, :]).flatten(),
        np.array(rr_wheel[1, :]).flatten(),
        truckcolor,
    )
    plt.plot(
        np.array(fl_wheel[0, :]).flatten(),
        np.array(fl_wheel[1, :]).flatten(),
        truckcolor,
    )
    plt.plot(
        np.array(rl_wheel[0, :]).flatten(),
        np.array(rl_wheel[1, :]).flatten(),
        truckcolor,
    )
    plt.plot(x, y, "*")


def getDistance(p1, p2):
    """
    Calculate distance
    :param p1: list, point1
    :param p2: list, point2
    :return: float, distance
    """
    dx = p1[0] - p2[0]
    dy = p1[1] - p2[1]
    return math.hypot(dx, dy)


class Vehicle:
    def __init__(self, x, y, yaw, vel=0):
        """
        Define a vehicle class
        :param x: float, x position
        :param y: float, y position
        :param yaw: float, vehicle heading
        :param vel: float, velocity
        """
        self.x = x
        self.y = y
        self.yaw = yaw
        self.vel = vel

    def update(self, acc, delta):
        """
        Vehicle motion model, here we are using simple bycicle model
        :param acc: float, acceleration
        :param delta: float, heading control
        """
        self.x += self.vel * math.cos(self.yaw) * dt
        self.y += self.vel * math.sin(self.yaw) * dt
        self.yaw += self.vel * math.tan(delta) / WB * dt
        self.vel += acc * dt


class Trajectory:
    def __init__(self, traj_x, traj_y):
        """
        Define a trajectory class
        :param traj_x: list, list of x position
        :param traj_y: list, list of y position
        """
        self.traj_x = traj_x
        self.traj_y = traj_y
        self.last_idx = 0

    def getPoint(self, idx):
        return [self.traj_x[idx], self.traj_y[idx]]

    def getTargetPoint(self, pos):
        """
        Get the next look ahead point
        :param pos: list, vehicle position
        :return: list, target point
        """
        target_idx = self.last_idx
        target_point = self.getPoint(target_idx)
        curr_dist = getDistance(pos, target_point)

        while curr_dist < L and target_idx < len(self.traj_x) - 1:
            target_idx += 1
            target_point = self.getPoint(target_idx)
            curr_dist = getDistance(pos, target_point)

        self.last_idx = target_idx
        return self.getPoint(target_idx)


class PI:
    def __init__(self, kp=1.0, ki=0.1):
        """
        Define a PID controller class
        :param kp: float, kp coeff
        :param ki: float, ki coeff
        :param kd: float, kd coeff
        """
        self.kp = kp
        self.ki = ki
        self.Pterm = 0.0
        self.Iterm = 0.0
        self.last_error = 0.0

    def control(self, error):
        """
        PID main function, given an input, this function will output a control unit
        :param error: float, error term
        :return: float, output control
        """
        self.Pterm = self.kp * error
        self.Iterm += error * dt

        self.last_error = error
        output = self.Pterm + self.ki * self.Iterm
        return output


def main():
    # create vehicle
    ego = Vehicle(20, 75, 0)
    
    
    # motor, servo init 
    move = DCMotor()
    servo = ServoMotor()
    move.setup()
    servo.setup()
    
    # colotdetector init 
    color_detector = ColorDetector()
    
    t_color_detect = threading.Thread(target=color_detector.detect_colors)
    t_color_detect.daemon = True
    t_color_detect.start()
    
    # target velocity
    target_vel = 20
    opt_path=[[20.0, 75.0, 0.0], [21.0, 75.0, 0.0], [22.0, 75.0, 0.0], [23.0, 75.0, 0.0], [24.0, 75.0, 0.0], [25.0, 75.0, 0.0],
     [26.0, 75.0, 0.0], [27.0, 75.0, 0.0], [28.0, 75.0, 0.0], [29.0, 75.0, 0.0], [30.0, 75.0, 0.0], [31.0, 75.0, 0.0],
     [32.0, 75.0, 0.0], [33.0, 75.0, 0.0], [34.0, 75.0, 0.0], [35.0, 75.0, 0.0], [36.0, 75.0, 0.0], [37.0, 75.0, 0.0],
     [38.0, 75.0, 0.0], [39.0, 75.0, 0.0], [40.0, 75.0, 0.0], [41.00000000000001, 75.0, 0.0],
     [42.00000000000001, 75.0, 0.0], [43.00000000000001, 75.0, 0.0], [44.00000000000001, 75.0, 0.0],
     [45.00000000000001, 75.0, 0.0], [46.000000000000014, 75.0, 0.0], [47.000000000000014, 75.0, 0.0],
     [48.000000000000014, 75.0, 0.0], [49.000000000000014, 75.0, 0.0], [50.000000000000014, 75.0, 0.0],
     [51.000000000000014, 75.0, 0.0], [52.000000000000014, 75.0, 0.0], [53.000000000000014, 75.0, 0.0],
     [54.000000000000014, 75.0, 0.0], [55.000000000000014, 75.0, 0.0], [56.000000000000014, 75.0, 0.0],
     [57.000000000000014, 75.0, 0.0], [58.00000000000002, 75.0, 0.0], [59.00000000000002, 75.0, 0.0],
     [60.00000000000002, 75.0, 0.0], [61.00000000000002, 75.0, 0.0], [62.00000000000002, 75.0, 0.0],
     [63.00000000000002, 75.0, 0.0], [64.00000000000003, 75.0, 0.0], [65.00000000000003, 75.0, 0.0],
     [66.00000000000003, 75.0, 0.0], [67.00000000000003, 75.0, 0.0], [68.00000000000003, 75.0, 0.0],
     [69.00000000000003, 75.0, 0.0], [70.00000000000003, 75.0, 0.0], [71.00000000000003, 75.0, 0.0],
     [72.00000000000003, 75.0, 0.0], [73.00000000000003, 75.0, 0.0], [74.00000000000003, 75.0, 0.0],
     [75.00000000000003, 75.0, 0.0], [76.00000000000003, 75.0, 0.0], [77.00000000000003, 75.0, 0.0],
     [78.00000000000003, 75.0, 0.0], [79.00000000000003, 75.0, 0.0], [80.00000000000003, 75.0, 0.0],
     [81.00000000000003, 75.0, 0.0], [82.00000000000003, 75.0, 0.0], [83.00000000000003, 75.0, 0.0],
     [84.00000000000004, 75.0, 0.0], [85.00000000000004, 75.0, 0.0], [86.00000000000004, 75.0, 0.0],
     [87.00000000000004, 75.0, 0.0], [88.00000000000004, 75.0, 0.0], [89.00000000000004, 75.0, 0.0],
     [90.00000000000004, 75.0, 0.0], [91.00000000000004, 75.0, 0.0], [92.00000000000004, 75.0, 0.0],
     [93.00000000000004, 75.0, 0.0], [94.00000000000004, 75.0, 0.0], [95.00000000000004, 75.0, 0.0],
     [96.00000000000004, 75.0, 0.0], [97.00000000000004, 75.0, 0.0], [98.00000000000004, 75.0, 0.0],
     [99.00000000000004, 75.0, 0.0], [100.00000000000004, 75.0, 0.0], [101.00000000000004, 75.0, 0.0],
     [102.00000000000004, 75.0, 0.0], [103.00000000000004, 75.0, 0.0], [104.00000000000004, 75.0, 0.0],
     [105.00000000000004, 75.0, 0.0], [106.00000000000004, 75.0, 0.0], [107.00000000000004, 75.0, 0.0],
     [108.00000000000004, 75.0, 0.0], [109.00000000000004, 75.0, 0.0], [110.00000000000004, 75.0, 0.0],
     [111.00000000000004, 75.0, 0.0], [112.00000000000004, 75.0, 0.0], [113.00000000000004, 75.0, 0.0],
     [114.00000000000004, 75.0, 0.0], [115.00000000000004, 75.0, 0.0], [116.00000000000006, 75.0, 0.0],
     [117.00000000000006, 75.0, 0.0], [118.00000000000006, 75.0, 0.0], [119.00000000000006, 75.0, 0.0],
     [120.00000000000006, 75.0, 0.0], [121.00000000000006, 75.0, 0.0], [122.00000000000006, 75.0, 0.0],
     [123.00000000000006, 75.0, 0.0], [124.00000000000006, 75.0, 0.0], [125.00000000000006, 75.0, 0.0],
     [126.00000000000006, 75.0, 0.0], [127.00000000000006, 75.0, 0.0], [128.00000000000006, 75.0, 0.0],
     [129.00000000000006, 75.0, 0.0], [130.00000000000006, 75.0, 0.0], [131.00000000000006, 75.0, 0.0],
     [132.00000000000006, 75.0, 0.0], [133.00000000000006, 75.0, 0.0], [134.00000000000006, 75.0, 0.0],
     [135.00000000000006, 75.0, 0.0], [136.00000000000006, 75.0, 0.0], [137.00000000000006, 75.0, 0.0],
     [138.00000000000006, 75.0, 0.0], [139.00000000000006, 75.0, 0.0], [140.00000000000006, 75.0, 0.0],
     [141.00000000000006, 75.0, 0.0], [142.00000000000006, 75.0, 0.0], [143.00000000000006, 75.0, 0.0],
     [144.00000000000006, 75.0, 0.0], [145.00000000000006, 75.0, 0.0], [146.00000000000006, 75.0, 0.0],
     [147.00000000000006, 75.0, 0.0], [148.00000000000009, 75.0, 0.0], [149.00000000000009, 75.0, 0.0],
     [150.00000000000009, 75.0, 0.0], [151.00000000000009, 75.0, 0.0], [152.00000000000009, 75.0, 0.0],
     [153.00000000000009, 75.0, 0.0], [154.00000000000009, 75.0, 0.0], [155.00000000000009, 75.0, 0.0],
     [156.00000000000009, 75.0, 0.0], [157.00000000000009, 75.0, 0.0], [158.00000000000009, 75.0, 0.0],
     [159.00000000000009, 75.0, 0.0], [160.00000000000009, 75.0, 0.0], [161.00000000000009, 75.0, 0.0],
     [162.00000000000009, 75.0, 0.0], [163.00000000000009, 75.0, 0.0], [164.00000000000009, 75.0, 0.0],
     [165.00000000000009, 75.0, 0.0], [166.00000000000009, 75.0, 0.0], [167.00000000000009, 75.0, 0.0],
     [168.00000000000009, 75.0, 0.0], [169.00000000000009, 75.0, 0.0], [170.00000000000009, 75.0, 0.0],
     [171.00000000000009, 75.0, 0.0], [172.00000000000009, 75.0, 0.0], [173.00000000000009, 75.0, 0.0],
     [174.00000000000009, 75.0, 0.0], [175.00000000000009, 75.0, 0.0], [176.00000000000009, 75.0, 0.0],
     [177.00000000000009, 75.0, 0.0], [178.00000000000009, 75.0, 0.0], [179.00000000000009, 75.0, 0.0],
     [180.00000000000009, 75.0, 0.0], [181.00000000000009, 75.0, 0.0], [182.00000000000009, 75.0, 0.0],
     [183.00000000000009, 75.0, 0.0], [184.00000000000009, 75.0, 0.0], [185.00000000000006, 75.0, 0.0],
     [186.00000000000006, 75.0, 0.0], [187.00000000000003, 75.0, 0.0], [188.0, 75.0, 0.0], [189.0, 75.0, 0.0],
     [189.99999999999997, 75.0, 0.0], [190.99999999999997, 75.0, 0.0], [191.99999999999994, 75.0, 0.0],
     [192.99999999999991, 75.0, 0.0], [193.99999999999991, 75.0, 0.0], [194.9999999999999, 75.0, 0.0],
     [195.99999999999986, 75.0, 0.0], [196.99999999999986, 75.0, 0.0], [197.99999999999983, 75.0, 0.0],
     [198.99999999999983, 75.0, 0.0], [199.9999999999998, 75.0, 0.0], [200.99999999999977, 75.0, 0.0],
     [201.99999999999977, 75.0, 0.0], [202.99999999999974, 75.0, 0.0], [203.99999999999974, 75.0, 0.0],
     [204.99996030824758, 75.00525438098401, 0.0226617023689979],
     [205.99875215047996, 75.05232744952578, 0.07152861725054735],
     [206.9940522846212, 75.14813277751085, 0.1203955321320968],
     [207.98348443139633, 75.29244162969896, 0.16926244701364626],
     [208.96468632135142, 75.48490946867582, 0.21812936189519572],
     [209.93531533477244, 75.7250767774363, 0.26699627677674515],
     [210.89305409469017, 76.01237015648134, 0.3158631916582946],
     [211.83561599961837, 76.34610369280938, 0.364730106539844],
     [212.76075068281517, 76.72548059753379, 0.41359702142139343],
     [213.66624938503415, 77.14959510821653, 0.46246393630294286],
     [214.5499502279375, 77.61743465137612, 0.5113308511844923],
     [215.40974337558112, 78.12788226000701, 0.5601977660660418],
     [216.2435760716481, 78.67971924033867, 0.6090646809475913],
     [217.04945754040511, 79.27162808146701, 0.6579315958291407],
     [217.8254637396798, 79.90219560091214, 0.7067985107106902],
     [218.56974195451173, 80.56991631859167, 0.7556654255922397],
     [219.28051522050998, 81.27319605115483, 0.8045323404737892],
     [219.95608656635574, 82.01035571809547, 0.8533992553553387],
     [220.5948430653219, 82.77963535055717, 0.9022661702368882],
     [221.19525968613576, 83.5791982932592, 0.9511330851184376],
     [221.7559029339917, 84.40713558951143, 0.9999999999999871],
     [222.27543427302012, 85.26147053884877, 1.0488669148815366],
     [222.75261332204224, 86.14016341640396, 1.097733829763086],
     [223.18630081598042, 87.04111634275114, 1.1466007446446356],
     [223.5754613258536, 87.96217829259334, 1.195467659526185],
     [223.91916573086453, 88.90115023033587, 1.2443345744077345],
     [224.21659343667548, 89.85579036028429, 1.293201489289284],
     [224.4670343345777, 90.823819478932, 1.3420684041708335], [224.6698904968759, 91.8029264165591, 1.390935319052383],
     [224.8246776044409, 92.79077355515068, 1.4398022339339325],
     [224.93102610302154, 93.78500240946016, 1.488669148815482],
     [224.98868208555558, 94.7832392578934, 1.5375360636970314],
     [224.99999999999997, 95.78311377432883, 1.5707963267948966],
     [224.99999999999997, 94.78311377432883, 1.5707963267948966],
     [224.99999999999997, 93.78311377432883, 1.5707963267948966],
     [224.99999999999997, 92.78311377432883, 1.5707963267948966],
     [224.99999999999997, 91.78311377432883, 1.5707963267948966],
     [224.99999999999997, 90.78311377432883, 1.5707963267948966],
     [224.99999999999997, 89.78311377432883, 1.5707963267948966],
     [224.99999999999997, 88.78311377432883, 1.5707963267948966],
     [224.99999999999997, 87.78311377432883, 1.5707963267948966],
     [224.99999999999997, 86.78311377432883, 1.5707963267948966],
     [224.99999999999997, 85.78311377432883, 1.5707963267948966],
     [224.99999999999997, 84.78311377432883, 1.5707963267948966],
     [224.99999999999997, 83.78311377432883, 1.5707963267948966],
     [224.99999999999997, 82.78311377432883, 1.5707963267948966],
     [224.99999999999997, 81.78311377432883, 1.5707963267948966],
     [224.99999999999997, 80.78311377432883, 1.5707963267948966],
     [224.99999999999997, 79.78311377432883, 1.5707963267948966],
     [224.99999999999997, 78.78311377432883, 1.5707963267948966],
     [224.99999999999997, 77.78311377432881, 1.5707963267948966],
     [224.99999999999997, 76.78311377432881, 1.5707963267948966],
     [224.99999999999997, 75.78311377432881, 1.5707963267948966],
     [224.99999999999997, 74.78311377432881, 1.5707963267948966],
     [224.99999999999997, 73.78311377432881, 1.5707963267948966],
     [224.99999999999997, 72.78311377432881, 1.5707963267948966],
     [224.99999999999997, 71.78311377432881, 1.5707963267948966],
     [224.99999999999997, 70.78311377432881, 1.5707963267948966],
     [224.99999999999997, 69.78311377432881, 1.5707963267948966],
     [224.99999999999997, 68.78311377432881, 1.5707963267948966],
     [224.99999999999997, 67.78311377432881, 1.5707963267948966],
     [224.99999999999997, 66.78311377432881, 1.5707963267948966],
     [224.99999999999997, 65.78311377432881, 1.5707963267948966],
     [224.99999999999997, 64.78311377432881, 1.5707963267948966],
     [224.99999999999997, 63.78311377432881, 1.5707963267948966],
     [224.99999999999997, 62.78311377432881, 1.5707963267948966],
     [224.99999999999997, 61.78311377432881, 1.5707963267948966],
     [224.99999999999997, 60.78311377432881, 1.5707963267948966],
     [224.99999999999997, 59.7831137743288, 1.5707963267948966],
     [224.99999999999997, 58.7831137743288, 1.5707963267948966],
     [224.99999999999997, 57.7831137743288, 1.5707963267948966],
     [224.99999999999997, 56.7831137743288, 1.5707963267948966],
     [224.99999999999997, 55.7831137743288, 1.5707963267948966],
     [224.99999999999997, 54.7831137743288, 1.5707963267948966],
     [224.99999999999997, 53.7831137743288, 1.5707963267948966],
     [224.99999999999997, 52.7831137743288, 1.5707963267948966],
     [224.99999999999997, 51.7831137743288, 1.5707963267948966],
     [224.99999999999997, 50.7831137743288, 1.5707963267948966],
     [224.99999999999997, 49.7831137743288, 1.5707963267948966],
     [224.99999999999997, 48.7831137743288, 1.5707963267948966],
     [224.99999999999997, 47.7831137743288, 1.5707963267948966],
     [224.99999999999997, 46.7831137743288, 1.5707963267948966],
     [224.99999999999997, 45.7831137743288, 1.5707963267948966],
     [224.99999999999997, 44.7831137743288, 1.5707963267948966],
     [224.99999999999997, 43.7831137743288, 1.5707963267948966],
     [224.99999999999997, 42.7831137743288, 1.5707963267948966],
     [224.99999999999997, 41.7831137743288, 1.5707963267948966],
     [224.99999999999997, 40.7831137743288, 1.5707963267948966],
     [224.99999999999997, 39.78311377432878, 1.5707963267948966],
     [224.99999999999997, 38.78311377432878, 1.5707963267948966],
     [224.99999999999997, 37.78311377432878, 1.5707963267948966],
     [224.99999999999997, 36.78311377432878, 1.5707963267948966],
     [224.99999999999997, 35.78311377432878, 1.5707963267948966],
     [224.99999999999997, 34.78311377432878, 1.5707963267948966],
     [224.99999999999997, 33.78311377432878, 1.5707963267948966],
     [224.99999999999997, 32.78311377432878, 1.5707963267948966],
     [224.99999999999997, 31.783113774328783, 1.5707963267948966],
     [224.99999999999997, 30.783113774328783, 1.5707963267948966],
     [224.99999999999997, 29.783113774328783, 1.5707963267948966],
     [224.99999999999997, 28.783113774328783, 1.5707963267948966],
     [224.99999999999997, 27.783113774328783, 1.5707963267948966],
     [224.99999999999997, 26.783113774328783, 1.5707963267948966],
     [224.99999999999997, 25.783113774328783, 1.5707963267948966], [224.99999999999997, 25.0, 1.5707963267948966]]
    
    opt_path = np.array(opt_path)
    # target course
    traj_x = [sublist[0] for sublist in opt_path]
    traj_y = [sublist[1] for sublist in opt_path]
    
    traj = Trajectory(traj_x, traj_y)
    goal = traj.getPoint(len(traj_x) - 1)

    # create PI controller
    PI_acc = PI()
    PI_yaw = PI()

    # real trajectory
    traj_ego_x = []
    traj_ego_y = []
    
    while getDistance([color_detector.ego_x, color_detector.ego_y], goal) > 1:
        target_point = traj.getTargetPoint([color_detector.ego_x, color_detector.ego_y])

        # use PID to control the vehicle
        vel_err = target_vel - ego.vel
        speed = vel_err

        yaw_err = math.atan2(target_point[1] - color_detector.ego_y, target_point[0] - color_detector.ego_x) - color_detector.yaw
        if yaw_err < 0 and color_detector.yaw > 0:
            #후진 상황
            color_detector.yaw = -color_detector.yaw
            yaw_err = math.atan2(target_point[1] - color_detector.ego_y, target_point[0] - color_detector.ego_x) - color_detector.yaw
        # acc = PI_acc.control(vel_err)
       
        delta = PI_yaw.control(yaw_err)

        move.move(speed)
        servo.angle_control(delta)

        # move the vehicle
        ego.update(speed, delta)

        # store the trajectory
        traj_ego_x.append(color_detector.ego_x)
        traj_ego_y.append(color_detector.ego_y)
        time.sleep(0.5)
        
    # while getDistance([ego.x, ego.y], goal) > 1:
    #     color_detector.ego_x
    #     target_point = traj.getTargetPoint([ego.x, ego.y])

    #     # use PID to control the vehicle
    #     vel_err = target_vel - ego.vel
    #     speed = vel_err

    #     yaw_err = math.atan2(target_point[1] - ego.y, target_point[0] - ego.x) - ego.yaw
    #     if yaw_err < 0 and ego.yaw > 0:
    #         #후진 상황
    #         ego.yaw = -ego.yaw
    #         yaw_err = math.atan2(target_point[1] - ego.y, target_point[0] - ego.x) - ego.yaw
    #     # acc = PI_acc.control(vel_err)
       
    #     delta = PI_yaw.control(yaw_err)

    #     move.move(speed)
    #     servo.angle_control(delta)
        

    #     # move the vehicle
    #     ego.update(speed, delta)

    #     # store the trajectory
    #     traj_ego_x.append(ego.x)
    #     traj_ego_y.append(ego.y)
    #     time.sleep(0.3)

if __name__ == "__main__":
    main()